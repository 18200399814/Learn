1.类之间的"实现关系"代码实现：
（1）通过单继承一个接口实现。
（2）通过多继承多个接口实现。

2.类之间的“泛化关系”代码实现：
（1）通过继承抽象类实现。
（2）通过继承普通类实现。

3.类之间的“组合关系”代码实现：
（1）通过一个类包含另外一个类的成员对象实现。
（2）通过一个类包含另外一个类的成员对象数组实现。
（3）通过一个类包含另外一个类的成员指针，并同时保证在构造函数中new出成员指针对象，析构函数中delete释放成员指针对象实现。
	 使用一个类包含另外一个类的成员指针的方式实现类之间的组合关系时，必须保证这两个类生命周期相同（即同时构造同时销毁）。
（4）通过一个类包含另外一个类的成员指针数组，并同时保证在构造函数中new出所有成员指针数组对象，析构函数中delete释放所有成员指针数组对象。
	 使用一个类包含另外一个类的成员指针数组的方式实现类之间的组合关系时，必须保证成员指针数组中每一个指针指向的对象生命周期与父对象生命周期相同。
（5）通过一个类包含另外一个类的对象array成员实现。
（6）通过一个类包含另外一个类的指针array成员实现。并且array中的每一个成员指针必须在父对象构造函数中new出来，在父对象析构函数中delete释放掉。
（7）通过一个类包含另外一个类的对象成员list/vector实现。在父对象的构造函数中必须将数量一定的子对象添加到list/vector中。
     且在父对象的使用过程中，list/vector包含的子对象数量不能增删、需要保持不变。
（8）通过一个类包含另外一个类的指针成员list/vector实现。在父对象的构造函数中必须new出一定数量的成员指针对象，并将其添加到list/vector中。
	 在父对象的析构函数中需要delete释放成员list/vector中包含的所有指针。
	 
4.类之间的“聚合关系”代码实现：
（1）通过一个类包含另外一个类的成员指针，但是使父子对象之间的生命周期不同实现。有三种方式使父子类对象之间的生命周期不同：
     ①在父对象构造函数或者设置器中为成员指针赋值，但在父对象的析构函数中不delete释放成员指针。
	 ②在父对象的构造函数中new出成员指针，但在父对象的析构函数中不delete释放成员指针。
	 ③在父对象构造函数为成员指针赋值，并在父对象的析构函数中delete释放成员指针
（2）通过一个类包含另外一个类的成员指针数组，但必须使成员指针数组中的所有指针指向的对象和父对象之间的生命周期都不同实现。
（3）通过一个类包含另外一个类的指针array成员实现，但必须使array中的所有指针指向的对象和父对象之间的生命周期都不同实现。
（4）通过一个类包含另外一个类的对象成员list/vector实现。在父对象的使用过程中可以通过add/remove方法增删list/vector中的成员对象。
（5）通过一个类包含另外一个类的指针成员list/vector实现。在父对象的使用过程中可以通过add/remove方法管理list/vector中的成员指针。

5.类之间的“关联关系”代码实现：（聚合和组合关系都属于关联关系，他们只是关联关系的一种特例）
（1）通过一个类包含另外一个类的成员对象/指针，实现单向关联。
（2）通过两个类互相包含对方类的成员对象/指针，实现双向关联。
（3）通过一个类包含另外一个类的成员对象/指针数组实现。
（4）通过一个类包含另外一个类的成员对象/指针array实现。
（5）通过一个类包含另外一个类的成员对象或指针list/vector实现。

5.类之间的“依赖关系”代码实现：
（1）通过一个类的某个方法中使用了另外一个类的局部变量实现。
（2）通过一个类的某个方法中使用另外一个类对象作函数参数实现。
（3）通过一个类的某个方法中调用了另外一个类的静态方法实现。